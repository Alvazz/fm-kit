/**
 * Flashmoov
 * Flashmoov
 *
 * OpenAPI spec version: 2.0.0
 * Contact: tech@flashmoov.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FlashCreateCardBody', 'model/FlashDeleteBody', 'model/FlashUpdateBody', 'model/FlashmoovAPIResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FlashCreateCardBody'), require('../model/FlashDeleteBody'), require('../model/FlashUpdateBody'), require('../model/FlashmoovAPIResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Flashmoov) {
      root.Flashmoov = {};
    }
    root.Flashmoov.ManageApi = factory(root.Flashmoov.ApiClient, root.Flashmoov.FlashCreateCardBody, root.Flashmoov.FlashDeleteBody, root.Flashmoov.FlashUpdateBody, root.Flashmoov.FlashmoovAPIResponse);
  }
}(this, function(ApiClient, FlashCreateCardBody, FlashDeleteBody, FlashUpdateBody, FlashmoovAPIResponse) {
  'use strict';

  /**
   * Manage service.
   * @module api/ManageApi
   * @version 2.0.0
   */

  /**
   * Constructs a new ManageApi. 
   * @alias module:api/ManageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the flashCreateCard operation.
     * @callback module:api/ManageApi~flashCreateCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlashmoovAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create card
     * @param {module:model/FlashCreateCardBody} flashCreateCardBody Flash content
     * @param {module:api/ManageApi~flashCreateCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlashmoovAPIResponse}
     */
    this.flashCreateCard = function(flashCreateCardBody, callback) {
      var postBody = flashCreateCardBody;

      // verify the required parameter 'flashCreateCardBody' is set
      if (flashCreateCardBody === undefined || flashCreateCardBody === null) {
        throw new Error("Missing the required parameter 'flashCreateCardBody' when calling flashCreateCard");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = [];
      var returnType = FlashmoovAPIResponse;

      return this.apiClient.callApi(
        '/card/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flashDelete operation.
     * @callback module:api/ManageApi~flashDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlashmoovAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete products
     * Delete product
     * @param {module:model/FlashDeleteBody} flashDeleteBody more book information
     * @param {module:api/ManageApi~flashDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlashmoovAPIResponse}
     */
    this.flashDelete = function(flashDeleteBody, callback) {
      var postBody = flashDeleteBody;

      // verify the required parameter 'flashDeleteBody' is set
      if (flashDeleteBody === undefined || flashDeleteBody === null) {
        throw new Error("Missing the required parameter 'flashDeleteBody' when calling flashDelete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FlashmoovAPIResponse;

      return this.apiClient.callApi(
        '/flash/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flashUpdate operation.
     * @callback module:api/ManageApi~flashUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlashmoovAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product
     * Update product
     * @param {module:model/FlashUpdateBody} flashUpdateBody 
     * @param {module:api/ManageApi~flashUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlashmoovAPIResponse}
     */
    this.flashUpdate = function(flashUpdateBody, callback) {
      var postBody = flashUpdateBody;

      // verify the required parameter 'flashUpdateBody' is set
      if (flashUpdateBody === undefined || flashUpdateBody === null) {
        throw new Error("Missing the required parameter 'flashUpdateBody' when calling flashUpdate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FlashmoovAPIResponse;

      return this.apiClient.callApi(
        '/flash/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the flashUploadContent operation.
     * @callback module:api/ManageApi~flashUploadContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlashmoovAPIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a file.
     * @param {String} id Flash id
     * @param {File} cover 
     * @param {Object} opts Optional parameters
     * @param {File} opts.contentImage 
     * @param {File} opts.contentVideo 
     * @param {File} opts.contentAudio 
     * @param {String} opts.contentText 
     * @param {module:api/ManageApi~flashUploadContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlashmoovAPIResponse}
     */
    this.flashUploadContent = function(id, cover, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling flashUploadContent");
      }

      // verify the required parameter 'cover' is set
      if (cover === undefined || cover === null) {
        throw new Error("Missing the required parameter 'cover' when calling flashUploadContent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'cover': cover,
        'contentImage': opts['contentImage'],
        'contentVideo': opts['contentVideo'],
        'contentAudio': opts['contentAudio'],
        'contentText': opts['contentText']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = [];
      var returnType = FlashmoovAPIResponse;

      return this.apiClient.callApi(
        '/flash/upload/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
