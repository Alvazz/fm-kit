/**
 * Flashmoov
 * Flashmoov
 *
 * OpenAPI spec version: 2.0.0
 * Contact: tech@flashmoov.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Actor', 'model/ActorAccount', 'model/ActorEnum', 'model/ActorProfile', 'model/Address', 'model/ApplicationConfiguration', 'model/BlobStoreObject', 'model/CardInteraction', 'model/Coordinates', 'model/DateAndTime', 'model/DateTimeInterval', 'model/EnvironmentConfiguration', 'model/FacebookConfiguration', 'model/Flash', 'model/FlashAutocompleteBody', 'model/FlashBodyRequest', 'model/FlashCard', 'model/FlashConfiguration', 'model/FlashContent', 'model/FlashContentTypeEnum', 'model/FlashCreateCardBody', 'model/FlashDeleteBody', 'model/FlashInitBody', 'model/FlashPermission', 'model/FlashPolicies', 'model/FlashPromoteBody', 'model/FlashQueryBody', 'model/FlashRecommandedBody', 'model/FlashTemp', 'model/FlashUpdateBody', 'model/FlashVisibilityEnum', 'model/FlashmoovAPIRequest', 'model/FlashmoovAPIResponse', 'model/GeoJsonGeometryCollection', 'model/Ids', 'model/LikeBodyRequest', 'model/Location', 'model/Meta', 'model/MongoConfiguration', 'model/MongoConfigurationInner', 'model/MultimediaContent', 'model/MultimediaContentEnum', 'model/PlatformConfiguration', 'model/Props', 'model/Query', 'model/QueryPrj', 'model/QuerySort', 'model/SessionTemp', 'model/ShareBodyRequest', 'model/SocialEnum', 'model/SocialInfo', 'model/SocialProfile', 'model/StatusEnum', 'model/StoreObject', 'model/Tags', 'model/Trait', 'model/UpdateParam', 'api/ActApi', 'api/CheckApi', 'api/ManageApi', 'api/RegisterApi', 'api/RetrieveApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Actor'), require('./model/ActorAccount'), require('./model/ActorEnum'), require('./model/ActorProfile'), require('./model/Address'), require('./model/ApplicationConfiguration'), require('./model/BlobStoreObject'), require('./model/CardInteraction'), require('./model/Coordinates'), require('./model/DateAndTime'), require('./model/DateTimeInterval'), require('./model/EnvironmentConfiguration'), require('./model/FacebookConfiguration'), require('./model/Flash'), require('./model/FlashAutocompleteBody'), require('./model/FlashBodyRequest'), require('./model/FlashCard'), require('./model/FlashConfiguration'), require('./model/FlashContent'), require('./model/FlashContentTypeEnum'), require('./model/FlashCreateCardBody'), require('./model/FlashDeleteBody'), require('./model/FlashInitBody'), require('./model/FlashPermission'), require('./model/FlashPolicies'), require('./model/FlashPromoteBody'), require('./model/FlashQueryBody'), require('./model/FlashRecommandedBody'), require('./model/FlashTemp'), require('./model/FlashUpdateBody'), require('./model/FlashVisibilityEnum'), require('./model/FlashmoovAPIRequest'), require('./model/FlashmoovAPIResponse'), require('./model/GeoJsonGeometryCollection'), require('./model/Ids'), require('./model/LikeBodyRequest'), require('./model/Location'), require('./model/Meta'), require('./model/MongoConfiguration'), require('./model/MongoConfigurationInner'), require('./model/MultimediaContent'), require('./model/MultimediaContentEnum'), require('./model/PlatformConfiguration'), require('./model/Props'), require('./model/Query'), require('./model/QueryPrj'), require('./model/QuerySort'), require('./model/SessionTemp'), require('./model/ShareBodyRequest'), require('./model/SocialEnum'), require('./model/SocialInfo'), require('./model/SocialProfile'), require('./model/StatusEnum'), require('./model/StoreObject'), require('./model/Tags'), require('./model/Trait'), require('./model/UpdateParam'), require('./api/ActApi'), require('./api/CheckApi'), require('./api/ManageApi'), require('./api/RegisterApi'), require('./api/RetrieveApi'));
  }
}(function(ApiClient, Actor, ActorAccount, ActorEnum, ActorProfile, Address, ApplicationConfiguration, BlobStoreObject, CardInteraction, Coordinates, DateAndTime, DateTimeInterval, EnvironmentConfiguration, FacebookConfiguration, Flash, FlashAutocompleteBody, FlashBodyRequest, FlashCard, FlashConfiguration, FlashContent, FlashContentTypeEnum, FlashCreateCardBody, FlashDeleteBody, FlashInitBody, FlashPermission, FlashPolicies, FlashPromoteBody, FlashQueryBody, FlashRecommandedBody, FlashTemp, FlashUpdateBody, FlashVisibilityEnum, FlashmoovAPIRequest, FlashmoovAPIResponse, GeoJsonGeometryCollection, Ids, LikeBodyRequest, Location, Meta, MongoConfiguration, MongoConfigurationInner, MultimediaContent, MultimediaContentEnum, PlatformConfiguration, Props, Query, QueryPrj, QuerySort, SessionTemp, ShareBodyRequest, SocialEnum, SocialInfo, SocialProfile, StatusEnum, StoreObject, Tags, Trait, UpdateParam, ActApi, CheckApi, ManageApi, RegisterApi, RetrieveApi) {
  'use strict';

  /**
   * Flashmoov.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var Flashmoov = require('index'); // See note below*.
   * var xxxSvc = new Flashmoov.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new Flashmoov.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new Flashmoov.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new Flashmoov.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Actor model constructor.
     * @property {module:model/Actor}
     */
    Actor: Actor,
    /**
     * The ActorAccount model constructor.
     * @property {module:model/ActorAccount}
     */
    ActorAccount: ActorAccount,
    /**
     * The ActorEnum model constructor.
     * @property {module:model/ActorEnum}
     */
    ActorEnum: ActorEnum,
    /**
     * The ActorProfile model constructor.
     * @property {module:model/ActorProfile}
     */
    ActorProfile: ActorProfile,
    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address: Address,
    /**
     * The ApplicationConfiguration model constructor.
     * @property {module:model/ApplicationConfiguration}
     */
    ApplicationConfiguration: ApplicationConfiguration,
    /**
     * The BlobStoreObject model constructor.
     * @property {module:model/BlobStoreObject}
     */
    BlobStoreObject: BlobStoreObject,
    /**
     * The CardInteraction model constructor.
     * @property {module:model/CardInteraction}
     */
    CardInteraction: CardInteraction,
    /**
     * The Coordinates model constructor.
     * @property {module:model/Coordinates}
     */
    Coordinates: Coordinates,
    /**
     * The DateAndTime model constructor.
     * @property {module:model/DateAndTime}
     */
    DateAndTime: DateAndTime,
    /**
     * The DateTimeInterval model constructor.
     * @property {module:model/DateTimeInterval}
     */
    DateTimeInterval: DateTimeInterval,
    /**
     * The EnvironmentConfiguration model constructor.
     * @property {module:model/EnvironmentConfiguration}
     */
    EnvironmentConfiguration: EnvironmentConfiguration,
    /**
     * The FacebookConfiguration model constructor.
     * @property {module:model/FacebookConfiguration}
     */
    FacebookConfiguration: FacebookConfiguration,
    /**
     * The Flash model constructor.
     * @property {module:model/Flash}
     */
    Flash: Flash,
    /**
     * The FlashAutocompleteBody model constructor.
     * @property {module:model/FlashAutocompleteBody}
     */
    FlashAutocompleteBody: FlashAutocompleteBody,
    /**
     * The FlashBodyRequest model constructor.
     * @property {module:model/FlashBodyRequest}
     */
    FlashBodyRequest: FlashBodyRequest,
    /**
     * The FlashCard model constructor.
     * @property {module:model/FlashCard}
     */
    FlashCard: FlashCard,
    /**
     * The FlashConfiguration model constructor.
     * @property {module:model/FlashConfiguration}
     */
    FlashConfiguration: FlashConfiguration,
    /**
     * The FlashContent model constructor.
     * @property {module:model/FlashContent}
     */
    FlashContent: FlashContent,
    /**
     * The FlashContentTypeEnum model constructor.
     * @property {module:model/FlashContentTypeEnum}
     */
    FlashContentTypeEnum: FlashContentTypeEnum,
    /**
     * The FlashCreateCardBody model constructor.
     * @property {module:model/FlashCreateCardBody}
     */
    FlashCreateCardBody: FlashCreateCardBody,
    /**
     * The FlashDeleteBody model constructor.
     * @property {module:model/FlashDeleteBody}
     */
    FlashDeleteBody: FlashDeleteBody,
    /**
     * The FlashInitBody model constructor.
     * @property {module:model/FlashInitBody}
     */
    FlashInitBody: FlashInitBody,
    /**
     * The FlashPermission model constructor.
     * @property {module:model/FlashPermission}
     */
    FlashPermission: FlashPermission,
    /**
     * The FlashPolicies model constructor.
     * @property {module:model/FlashPolicies}
     */
    FlashPolicies: FlashPolicies,
    /**
     * The FlashPromoteBody model constructor.
     * @property {module:model/FlashPromoteBody}
     */
    FlashPromoteBody: FlashPromoteBody,
    /**
     * The FlashQueryBody model constructor.
     * @property {module:model/FlashQueryBody}
     */
    FlashQueryBody: FlashQueryBody,
    /**
     * The FlashRecommandedBody model constructor.
     * @property {module:model/FlashRecommandedBody}
     */
    FlashRecommandedBody: FlashRecommandedBody,
    /**
     * The FlashTemp model constructor.
     * @property {module:model/FlashTemp}
     */
    FlashTemp: FlashTemp,
    /**
     * The FlashUpdateBody model constructor.
     * @property {module:model/FlashUpdateBody}
     */
    FlashUpdateBody: FlashUpdateBody,
    /**
     * The FlashVisibilityEnum model constructor.
     * @property {module:model/FlashVisibilityEnum}
     */
    FlashVisibilityEnum: FlashVisibilityEnum,
    /**
     * The FlashmoovAPIRequest model constructor.
     * @property {module:model/FlashmoovAPIRequest}
     */
    FlashmoovAPIRequest: FlashmoovAPIRequest,
    /**
     * The FlashmoovAPIResponse model constructor.
     * @property {module:model/FlashmoovAPIResponse}
     */
    FlashmoovAPIResponse: FlashmoovAPIResponse,
    /**
     * The GeoJsonGeometryCollection model constructor.
     * @property {module:model/GeoJsonGeometryCollection}
     */
    GeoJsonGeometryCollection: GeoJsonGeometryCollection,
    /**
     * The Ids model constructor.
     * @property {module:model/Ids}
     */
    Ids: Ids,
    /**
     * The LikeBodyRequest model constructor.
     * @property {module:model/LikeBodyRequest}
     */
    LikeBodyRequest: LikeBodyRequest,
    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location: Location,
    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta: Meta,
    /**
     * The MongoConfiguration model constructor.
     * @property {module:model/MongoConfiguration}
     */
    MongoConfiguration: MongoConfiguration,
    /**
     * The MongoConfigurationInner model constructor.
     * @property {module:model/MongoConfigurationInner}
     */
    MongoConfigurationInner: MongoConfigurationInner,
    /**
     * The MultimediaContent model constructor.
     * @property {module:model/MultimediaContent}
     */
    MultimediaContent: MultimediaContent,
    /**
     * The MultimediaContentEnum model constructor.
     * @property {module:model/MultimediaContentEnum}
     */
    MultimediaContentEnum: MultimediaContentEnum,
    /**
     * The PlatformConfiguration model constructor.
     * @property {module:model/PlatformConfiguration}
     */
    PlatformConfiguration: PlatformConfiguration,
    /**
     * The Props model constructor.
     * @property {module:model/Props}
     */
    Props: Props,
    /**
     * The Query model constructor.
     * @property {module:model/Query}
     */
    Query: Query,
    /**
     * The QueryPrj model constructor.
     * @property {module:model/QueryPrj}
     */
    QueryPrj: QueryPrj,
    /**
     * The QuerySort model constructor.
     * @property {module:model/QuerySort}
     */
    QuerySort: QuerySort,
    /**
     * The SessionTemp model constructor.
     * @property {module:model/SessionTemp}
     */
    SessionTemp: SessionTemp,
    /**
     * The ShareBodyRequest model constructor.
     * @property {module:model/ShareBodyRequest}
     */
    ShareBodyRequest: ShareBodyRequest,
    /**
     * The SocialEnum model constructor.
     * @property {module:model/SocialEnum}
     */
    SocialEnum: SocialEnum,
    /**
     * The SocialInfo model constructor.
     * @property {module:model/SocialInfo}
     */
    SocialInfo: SocialInfo,
    /**
     * The SocialProfile model constructor.
     * @property {module:model/SocialProfile}
     */
    SocialProfile: SocialProfile,
    /**
     * The StatusEnum model constructor.
     * @property {module:model/StatusEnum}
     */
    StatusEnum: StatusEnum,
    /**
     * The StoreObject model constructor.
     * @property {module:model/StoreObject}
     */
    StoreObject: StoreObject,
    /**
     * The Tags model constructor.
     * @property {module:model/Tags}
     */
    Tags: Tags,
    /**
     * The Trait model constructor.
     * @property {module:model/Trait}
     */
    Trait: Trait,
    /**
     * The UpdateParam model constructor.
     * @property {module:model/UpdateParam}
     */
    UpdateParam: UpdateParam,
    /**
     * The ActApi service constructor.
     * @property {module:api/ActApi}
     */
    ActApi: ActApi,
    /**
     * The CheckApi service constructor.
     * @property {module:api/CheckApi}
     */
    CheckApi: CheckApi,
    /**
     * The ManageApi service constructor.
     * @property {module:api/ManageApi}
     */
    ManageApi: ManageApi,
    /**
     * The RegisterApi service constructor.
     * @property {module:api/RegisterApi}
     */
    RegisterApi: RegisterApi,
    /**
     * The RetrieveApi service constructor.
     * @property {module:api/RetrieveApi}
     */
    RetrieveApi: RetrieveApi
  };

  return exports;
}));
